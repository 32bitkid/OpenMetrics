

# Rationale

The monitoring world is fragmented and there is no up-to-date standard.
The closest to an universal monitoring standard we as an industry have is SNMP.
While it is well-supported in the networking world, it failed to gain common adoption beyond this field.
SNMP also carries over many engineering trade-offs which made sense at the time, but are not matching well to today's challenges; a prime example would be the need to support ASN.1 with its many intricacies.
Security has been an afterthought and is not easily supported in SNMP as evidenced by the prevalence of SNMPv2 in the industry even though SNMPv3 would offer security benefits.

While there have been other efforts, none of them gained any wide-spread traction.
Furthermore, most standardization attempts have been foiled by trying to establish themselves in a niche and expanding from there.

More and more fields of IT are being swept up by commoditization, currently aka foo-as-code.
HTTP endpoints are replacing TCP/IP-based services, and UTF-8 has established itself as the universal non-binary encoding.
Finally, metrics-based monitoring is overhauling large parts of the monitoring landscape due to their scalability and adaptability.

Given all this, OpenMetrics is an effort to establish a new and universal standard for metrics-based monitoring.
Based on the Prometheus exposition format which already saw massive adoption with more than 300 exporters, TODO links TODO more content.
This extensive support with TODO different implementations of data ingestors by competing companies and projects shows that there's already an established consensus which is merely refined and made offical with the help of this document.

# Metrics and time series

Metrics are a specific kind of system data.
All system states are expressed as numerical values; counts of things, ENUMs, and boolean states being common examples.
Contrary to singular events which carry a specific time of when they happenend, metrics tend to aggregate data.
While this equals a loss in information resolution, the reduction in overhead more than makes up for this.

Time series are used to store the change of information over time.
While time series can support arbitrary strings or binary data, this document focuses on numeric data, i.e. metrics.

# Metric naming

# TODO namespaces - https://github.com/OpenObservability/OpenMetrics/issues/2
# TODO suffices, etc

# Data transmission

There are two wire formats specified in OpenMetrics: The text format and the protobuf format.
All client implementations MUST be able to emit text format; they MAY also emit protobuf if negotiated.
All server implementations MUST be able to ingest text format; they MAY also ingest protobuf if negotiated.
All implementations MUST default to the text format.

# Wire formats

Special care has been taken to make the wire formats ease to generate, to ingest, and to understand..
OpenMetrics is a type 3 grammar, making writing quick and small parsers possible.
Text compresses well, and protobuf is already binary and well-compressed.

## Text format

Metric names MUST appear as a group.
If a metricname has appeared in a group before it MUST NOT be repeated after that group finishes.



### ABNF

ABNF as per RFC 5234, UTF8-char as per RFC 3629.

data = *group LF EOF

group = *metadata *metricdata

metadata = ( "" / # SP ( "HELP" / "TYPE" / "UNIT" ) SP metadata-text LF )

metadata-text = *(UTF8-char / SP)

# TODO https://github.com/OpenObservability/OpenMetrics/pull/93#discussion_r248005922
metricdata = metricname labelset SP datapoint *1(SP timestamp) [ exemplar ] LF

metricname-inline = ( ALPHA / DIGIT / ":" ) [ ( ALPHA / DIGIT / "_" / ":" ) ]

metricname-namespace = [ ( ALPHA / "_" / ":" ) ] *metricname-inline ( ALPHA / DIGIT / ":" )

metricname-namespace-suffix = "__"

metricname-namespaced = ( ALPHA / ":" ) *metricname-inline

metricname-standalone = ( ALPHA / "_" / ":" ) *metricname-inline

metricname = ( [ metricname-namespace ] metricname-namespace-suffix metricname-namespaced / metricname-standalone )

labelset = ( "" / "{}" / labelset-labels)

labelset-labels = { ( labelname "=" DQUOTE 1*UTF8-char DQUOTE) *("," labelname "=" DQUOTE 1*UTF8-char DQUOTE) }

labelname = ( ALPHA / "_" ) *( ALPHA / DIGIT / "_" / )

# TODO https://github.com/OpenObservability/OpenMetrics/pull/93#discussion_r213579928
datapoint = ( float / "+Inf" / "-Inf" / "-Infinity" / "NaN" )

float = 1*DIGIT [ ( "." 1*DIGIT *1( "e" ( "+" / "-" ) 1*3DIGIT ) ) ]

# TODO adapt to timestamp discussion
timestamp = 1*DIGIT

# TODO put in length limit
exemplar = "#" SP 1*(UTF8-char / SP)

### Special metric types

#### Histograms

#### State sets

### Examples

````
# HELP go_gc_duration_seconds A summary of the GC invocation durations.
# TYPE go_gc_duration_seconds summary
# UNIT seconds
go_gc_duration_seconds{quantile="0"} 4.9797e-05
go_gc_duration_seconds{quantile="0.25"} 9.026e-05
go_gc_duration_seconds{quantile="0.5"} 0.000109604
go_gc_duration_seconds{quantile="0.75"} 0.00016786
go_gc_duration_seconds{quantile="1"} 0.011062186
go_gc_duration_seconds_sum 9241.311909524
go_gc_duration_seconds_count 1.2992713e+07
````

If exposing the same metric more than once, every instance MUST be exposed with a timestamp.
```
promhttp_metric_handler_requests_total{code="200"} 27205 1546777500
promhttp_metric_handler_requests_total{code="200"} 27401 1546777666
```

## protobuf format

# Security Considerations

Implementors MAY choose to offer authentication, authorization, and accounting; if they so choose, this SHOULD be handled outside of OpenMetrics.
#TODO should we require TLS 1.2 at a mimimum? # https://github.com/OpenObservability/OpenMetrics/issues/61
All exposer implementations SHOULD be able to secure their HTTP traffic with TLS 1.2 or later.
If a exposer implementation does not support encryption, operators SHOULD use reverse proxies, firewalling, and/or ACLs for AAA.
All ingester implementations MUST be able to ingest data from HTTP endpoints secured with TLS 1.2 or later.
Ingester implementations SHOULD be able to ingest data from HTTP without TLS.
All implementations SHOULD use TLS to transmit data.

# IANA Considerations

While currently most implementations of the Prometheus exposition format are using non-registered ports[Prometheus ports], OpenMetrics can be found at a well-defined port.
Metric exposition should be independent of production services; as such, ports like TCP/80, TCP/443, and TCP/8080 are not suitable for the use for OpenMetrics.
The port assigend by IANA for clients exposing data is XXX.

# TODO discuss this - https://github.com/OpenObservability/OpenMetrics/issues/123
If more than one metric endpoint needs to be reachable at a common IP address, operators SHOULD consider using a reverse proxy to reach endpoints on localhost addresses and ports.
To ease multiplexing, endpoints SHOULD carry their own name in their path, i.e. `/node_exporter/metrics`.


OpenMetrics would like to register two MIME types, `application/openmetrics-text` and `application/openmetrics-proto`.
NOTE TO EDITORS: Feedback appreciated.

# general TODOs

# TODO OM 1.0 must ease in the momentum of Proemtheus format, which is wider than just Prometheus itself

# TODO push vs pull

# TODO versioning

# TODO test suite & reference implementations

# TODO appendix with supporters

# TODO labels / n-dimensional matrices vs trees?

# TODO metric names unique with a certain label set

# References

[Prometheus ports]  https://github.com/prometheus/prometheus/wiki/Default-port-allocations
